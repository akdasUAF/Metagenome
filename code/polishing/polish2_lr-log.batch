#!/bin/bash
#SBATCH --partition=t1small       # Or your preferred partition
#SBATCH --ntasks=1                # Total number of tasks
#SBATCH --cpus-per-task=24        # Number of CPU cores per task (adjust as needed for --threads)
#SBATCH --mem=64G                 # Total memory for the job (adjust based on assembly/read size)
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --job-name="medaka_polish"
#SBATCH --output=logs/slurm_job_%j.log
#SBATCH --error=logs/slurm_job_err_%j.log

# Ensure modules are clean and slurm is loaded
module purge
module load slurm

# Set unlimited locked memory for processes (good for large jobs)
ulimit -l unlimited

# --- Conda Initialization ---
CONDA_BASE=$(conda info --base)
if [ -f "${CONDA_BASE}/etc/profile.d/conda.sh" ]; then
    . "${CONDA_BASE}/etc/profile.d/conda.sh"
    echo "Conda initialized from ${CONDA_BASE}/etc/profile.d/conda.sh"
else
    echo "ERROR: conda.sh not found at ${CONDA_BASE}/etc/profile.d/conda.sh."
    echo "Please ensure Conda is installed and 'conda init bash' has been run."
    exit 1
fi

# --- 1. User Configuration & Argument Parsing ---
# Input arguments:
# $1: <dataset_name> (e.g., "lr-even")
# $2: <assembler_name> (e.g., "canu")
# $3: <raw_reads_fastq_path> (Full path to raw reads file)
# $4: <draft_assembly_fasta_path> (Full path to draft assembly file)
if [ "$#" -ne 4 ]; then # Changed from 2 to 4 arguments
    echo "Usage: sbatch $0 <dataset_name> <assembler_name> <raw_reads_fastq_path> <draft_assembly_fasta_path>"
    echo "Example: sbatch $0 lr-even canu data/raw/lr-even/lr-even_raw.fastq data/canu/lr-even/lr-even_task.contigs.fasta"
    exit 1
fi

declare -r DATASET_NAME="$1"
declare -r ASSEMBLER_NAME="$2"
declare -r RAW_READS_FULLPATH="$3" # Now arg 3
declare -r DRAFT_ASSEMBLY_FULLPATH="$4" # Now arg 4

# Extract base names for consistent naming of files within directories
RAW_READS_BASENAME=$(basename "$RAW_READS_FULLPATH" | cut -d'.' -f1)
ASSEMBLY_BASENAME=$(basename "$DRAFT_ASSEMBLY_FULLPATH" | cut -d'.' -f1)

# Conda Environment Name
declare -r MEDAKA_ENV_NAME="medaka"

# Medaka Model to use (adjust for your chemistry)
declare -r MEDAKA_MODEL="r941_min_sup_g507" 

# --- 2. Derived Paths & Logging Setup ---
# NEW OUTPUT STRUCTURE: data/<assembler>/<dataset>/medaka_polish_results/
declare -r OUTPUT_BASE_DIR="data/${ASSEMBLER_NAME}/${DATASET_NAME}/medaka_polish_results"

# All sub-directories will be under this new base
declare -r LOG_DIR="${OUTPUT_BASE_DIR}/logs"
declare -r ALIGNMENT_DIR="${OUTPUT_BASE_DIR}/alignment"
declare -r MEDAKA_OUT_DIR="${OUTPUT_BASE_DIR}/polished_assembly" # This is where consensus.fasta will land

# Create necessary directories
mkdir -p "${LOG_DIR}" || { echo "ERROR: Could not create log directory ${LOG_DIR}"; exit 1; }
mkdir -p "${ALIGNMENT_DIR}" || { echo "ERROR: Could not create alignment directory ${ALIGNMENT_DIR}"; exit 1; }
mkdir -p "${MEDAKA_OUT_DIR}" || { echo "ERROR: Could not create medaka output directory ${MEDAKA_OUT_DIR}"; exit 1; }

# Detailed command log file
# Log file will now be dataset_assembler_medaka_workflow.log for clarity
declare -r path_log="${LOG_DIR}/${DATASET_NAME}_${ASSEMBLER_NAME}_medaka_workflow.log"
# Clear the log file at the start of the script
> "${path_log}"

# Redirect all script output to path_log
exec &> >(tee -a "${path_log}") # This redirects stdout and stderr to the log file AND to the slurm_job_*.log

echo "Script started at $(date)"
echo "Configuration:"
echo "  Dataset Name: ${DATASET_NAME}"
echo "  Assembler Name: ${ASSEMBLER_NAME}"
echo "  Raw Reads: ${RAW_READS_FULLPATH}"
echo "  Draft Assembly: ${DRAFT_ASSEMBLY_FULLPATH}"
echo "  Medaka Env: ${MEDAKA_ENV_NAME}"
echo "  Medaka Model: ${MEDAKA_MODEL}"
echo "  Output Base Directory: ${OUTPUT_BASE_DIR}"
echo ""

# Verify input files exist
if [ ! -f "${RAW_READS_FULLPATH}" ]; then
    echo "ERROR: Raw reads file not found: ${RAW_READS_FULLPATH}"
    exit 1
fi
if [ ! -f "${DRAFT_ASSEMBLY_FULLPATH}" ]; then
    echo "ERROR: Draft assembly file not found: ${DRAFT_ASSEMBLY_FULLPATH}"
    exit 1
fi

echo "Current memory usage before alignment:"
free -h

# --- 3. Alignment with mini_align ---
echo "########## Running Alignment Stage (mini_align) ##########"

# Define final BAM file path (mini_align with -m will create this sorted)
declare -r ALIGNED_SORTED_BAM="${ALIGNMENT_DIR}/${RAW_READS_BASENAME}_to_${ASSEMBLY_BASENAME}.sorted.bam"
declare -r ALIGNED_SORTED_BAM_IDX="${ALIGNED_SORTED_BAM}.bai" 

echo "Running mini_align: Aligning reads to draft assembly..."

conda run -n "${MEDAKA_ENV_NAME}" mini_align \
    -i "${RAW_READS_FULLPATH}" \
    -r "${DRAFT_ASSEMBLY_FULLPATH}" \
    -P -m \
    -p "${ALIGNED_SORTED_BAM}" \
    -t "${SLURM_CPUS_PER_TASK}"

if [ $? -ne 0 ]; then
    echo "ERROR: mini_align failed. Exit status: $?."
    exit 1
fi

echo "--- Diagnostic: Checking ALIGNED_SORTED_BAM file produced by mini_align ---"
if [ ! -s "${ALIGNED_SORTED_BAM}" ]; then
    echo "ERROR: ALIGNED_SORTED_BAM file is empty or missing after mini_align: ${ALIGNED_SORTED_BAM}"
    exit 1
fi
ls -lh "${ALIGNED_SORTED_BAM}"
echo "Running samtools flagstat on ALIGNED_SORTED_BAM to check integrity:"
conda run -n "${MEDAKA_ENV_NAME}" samtools flagstat "${ALIGNED_SORTED_BAM}"
if [ $? -ne 0 ]; then
    echo "ERROR: samtools flagstat failed on ALIGNED_SORTED_BAM. This indicates a corrupted BAM file produced by mini_align."
    exit 1
fi
echo "-------------------------------------------------------"

echo "Indexing sorted BAM file (Medaka requires an indexed BAM)..."
conda run -n "${MEDAKA_ENV_NAME}" samtools index -@ "${SLURM_CPUS_PER_TASK}" "${ALIGNED_SORTED_BAM}"
if [ $? -ne 0 ]; then
    echo "ERROR: Samtools indexing failed. Exit status: $?."
    exit 1
fi

# --- 4. Medaka Polishing ---
echo "########## Running Medaka Polishing Stage ##########"

echo "Running Medaka inference (polishing)..."

conda run -n "${MEDAKA_ENV_NAME}" medaka inference \
    --reads "${ALIGNED_SORTED_BAM}" \
    --draft "${DRAFT_ASSEMBLY_FULLPATH}" \
    --out_dir "${MEDAKA_OUT_DIR}" \
    --model "${MEDAKA_MODEL}" \
    --threads "${SLURM_CPUS_PER_TASK}"

if [ $? -ne 0 ]; then
    echo "ERROR: Medaka inference failed. Exit status: $?."
    exit 1
fi

echo "Medaka polishing completed. Final polished assembly will be in: ${MEDAKA_OUT_DIR}/consensus.fasta"
echo "Script finished at $(date)"