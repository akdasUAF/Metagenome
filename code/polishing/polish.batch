#!/bin/bash
#SBATCH --partition=t1small
#SBATCH --ntasks=24
#SBATCH --tasks-per-node=24
# #SBATCH --mem=214G
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN
#SBATCH --mail-type=END
#SBATCH --mail-type=FAIL
#SBATCH --job-name="panmeta_polishing"
#SBATCH --output=logs/slurm_job_%j.log
#SBATCH --error=logs/slurm_job_err_%j.log
#

## Clean out any modules, then reload slurm
module purge
module load slurm

ulimit -l unlimited

# --- SECTION 1: USER CONFIGURATION & ARGUMENT PARSING ---

# Parse Command-Line Arguments
# Now, $3 and $4 are expected to be the full relative paths to the files
if [ "$#" -ne 4 ]; then
    echo "Usage: sbatch $0 <dataset_id> <assembler_id> <raw_reads_fullpath> <draft_assembly_fullpath>" | tee /dev/stderr
    echo "Example: sbatch $0 lr-even flye data/raw/lr-even/lr-even_raw.fastq data/flye/lr-even/assembly.fasta" | tee /dev/stderr
    exit 1
fi

declare -r DATASET_ID="$1"          # e.g., lr-even
declare -r ASSEMBLER_ID="$2"         # e.g., flye
declare -r RAW_READS_FULLPATH="$3"   # e.g., data/raw/lr-even/lr-even_raw.fastq
declare -r DRAFT_ASSEMBLY_FULLPATH="$4" # e.g., data/flye/lr-even/assembly.fasta

# No additional path construction needed here, as arguments 3 and 4 are already full paths.

# Verify input files exist before proceeding
if [ ! -f "${RAW_READS_FULLPATH}" ]; then
    echo "ERROR: Raw reads file not found: ${RAW_READS_FULLPATH}" | tee /dev/stderr
    exit 1
fi
if [ ! -f "${DRAFT_ASSEMBLY_FULLPATH}" ]; then
    echo "ERROR: Draft assembly file not found: ${DRAFT_ASSEMBLY_FULLPATH}" | tee /dev/stderr
    exit 1
fi

# Conda Environment Names (These were from the previous working version)
declare -r MINIMAP2_ENV_NAME="align_minimap2"
declare -r RACON_ENV_NAME="racon"
declare -r MEDAKA_ENV_NAME="medaka"
declare -r QUAST_ENV_NAME="quast" # If you create a separate environment for Quast


# --- SECTION 2: DERIVED PATHS & LOGGING SETUP ---

# Base output directory for polished assemblies
declare -r POLISHED_DIR="data/${ASSEMBLER_ID}/${DATASET_ID}/polished"

# Medaka-specific output directory
declare -r MEDAKA_OUTPUT_DIR="data/${ASSEMBLER_ID}/${DATASET_ID}/medaka"

# Intermediate files
declare -r RACON_OVERLAP="${POLISHED_DIR}/overlap_${ASSEMBLER_ID}_${DATASET_ID}.sam"
declare -r RACON_POLISHED_ASSEMBLY="${POLISHED_DIR}/${DATASET_ID}_assembly_racon.fasta"

# Detailed command log file (separate from SLURM's job logs)
declare -r LOG_DIR="data/${ASSEMBLER_ID}/logs/polished"
mkdir -p "${LOG_DIR}" || { echo "ERROR: Could not create log directory ${LOG_DIR}"; exit 1; }
declare -r path_log="${LOG_DIR}/script_commands_${ASSEMBLER_ID}_${DATASET_ID}.log"

# Clear the log file at the start of the script
> "${path_log}"

echo "Script started at $(date)" | tee -a "${path_log}"
echo "Configuration:" | tee -a "${path_log}"
echo "  Dataset ID: ${DATASET_ID}" | tee -a "${path_log}"
echo "  Assembler ID: ${ASSEMBLER_ID}" | tee -a "${path_log}"
echo "  Raw Reads Full Path: ${RAW_READS_FULLPATH}" | tee -a "${path_log}"
echo "  Draft Assembly Full Path: ${DRAFT_ASSEMBLY_FULLPATH}" | tee -a "${path_log}"
echo "  Minimap2 Env: ${MINIMAP2_ENV_NAME}" | tee -a "${path_log}"
echo "  Racon Env: ${RACON_ENV_NAME}" | tee -a "${path_log}"
echo "  Medaka Env: ${MEDAKA_ENV_NAME}" | tee -a "${path_log}"
echo "" | tee -a "${path_log}"

# --- HARDCODED TOOL PATHS (NOW WITH YOUR EXACT PATHS) ---
# Ensure these paths are correct for your system and Conda environments
MINIMAP2_BIN="/home/wwinnett/miniconda3/envs/align_minimap2/bin/minimap2"
RACON_BIN="/home/wwinnett/miniconda3/envs/racon/bin/racon"
MEDAKA_CONSENSUS_BIN="/home/wwinnett/miniconda3/envs/medaka/bin/medaka_consensus"
# If you add Quast later, find its path similarly:
# QUAST_BIN="/home/wwinnett/miniconda3/envs/medaka/bin/quast.py" # Example if Quast is in medaka env

# Create a directory for output
mkdir -p "${POLISHED_DIR}" || { echo "ERROR: Could not create output directory ${POLISHED_DIR}"; exit 1; }


###$~~~~~#~####$~~~~~#~####$~~~~~#~####$~~~~~#~#
echo "########## Running Racon Stage ##########" | tee -a "${path_log}"

echo "Running Minimap2..." | tee -a "${path_log}"

conda run -n "${MINIMAP2_ENV_NAME}" minimap2 \
    -ax map-ont \
    -t 24 \
    "${DRAFT_ASSEMBLY_FULLPATH}" \
    "${RAW_READS_FULLPATH}" \
    > "${RACON_OVERLAP}" 2>> "${path_log}"
if [ $? -ne 0 ]; then echo "ERROR: Minimap2 failed." | tee -a "${path_log}"; exit 1; fi

### Racon into same folder
echo "Running Racon..." | tee -a "${path_log}"
conda run -n "${RACON_ENV_NAME}" racon \
    -t 24 \
    "${RAW_READS_FULLPATH}" \
    "${RACON_OVERLAP}" \
    "${DRAFT_ASSEMBLY_FULLPATH}" \
    > "${RACON_POLISHED_ASSEMBLY}" 2>&1 | tee -a "${path_log}"
if [ $? -ne 0 ]; then echo "ERROR: Racon failed." | tee -a "${path_log}"; exit 1; fi


###$~~~~~#~####$~~~~~#~####$~~~~~#~####$~~~~~#~#
echo "########## Running Medaka Stage ##########" | tee -a "${path_log}"

mkdir -p "${MEDAKA_OUTPUT_DIR}" || { echo "ERROR: Could not create Medaka output directory ${MEDAKA_OUTPUT_DIR}"; exit 1; } | tee -a "${path_log}"

echo "Running Medaka consensus..." | tee -a "${path_log}"
conda run -n "${MEDAKA_ENV_NAME}" medaka \
    -i "${RAW_READS_FULLPATH}" \
    -d "${RACON_POLISHED_ASSEMBLY}" \
    -o "${MEDAKA_OUTPUT_DIR}" \
    -m r941_min_sup_g507 \
    -t 24 2>&1 | tee -a "${path_log}"
if [ $? -ne 0 ]; then echo "ERROR: Medaka failed." | tee -a "${path_log}"; exit 1; fi


###$~~~~~#~####$~~~~~#~####$~~~~~#~####$~~~~~#~#
echo "########## Running Quast Stage ##########" | tee -a "${path_log}"

# Placeholder for Quast command (uncomment and adjust when ready)
# declare -r QUAST_OUTPUT_DIR="data/${ASSEMBLER_ID}/${DATASET_ID}/quast_results"
# mkdir -p "${QUAST_OUTPUT_DIR}" || { echo "ERROR: Could not create Quast output directory ${QUAST_OUTPUT_DIR}"; exit 1; }
# echo "Running Quast..." | tee -a "${path_log}"
# "${QUAST_BIN}" \
#     "${MEDAKA_OUTPUT_DIR}/consensus.fasta" \
#     -o "${QUAST_OUTPUT_DIR}" \
#     -t 24 2>&1 | tee -a "${path_log}"
# if [ $? -ne 0 ]; then echo "ERROR: Quast failed." | tee -a "${path_log}"; exit 1; fi

echo "Script finished at $(date)" | tee -a "${path_log}"