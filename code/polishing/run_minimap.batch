#!/bin/bash
#
# SLURM script for running Minimap2 alignment followed by Samtools processing.
#

#SBATCH --partition=t1small       # Your desired partition
#SBATCH --ntasks=1                # We will run one main task (the script itself)
#SBATCH --cpus-per-task=24        # Request 24 CPU cores for this task
#SBATCH --mem=64G                 # Request 64 GB of RAM for the entire job
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --job-name="Minimap2_Samtools_Align"
#SBATCH --output=logs/slurm_minimap2_%j.log   # Standard output log
#SBATCH --error=logs/slurm_minimap2_err_%j.log # Standard error log

## Clean out any modules, then reload slurm (this might be site-specific, adjust if needed)
# module purge
# module load slurm

# IMPORTANT: Conda initialization for non-interactive shells
# You MUST replace '/path/to/your/conda/installation' with the actual path
# where your Miniconda/Anaconda is installed.
# Example: source /home/wwinnett/miniconda3/etc/profile.d/conda.sh
source ~/miniconda3/etc/profile.d/conda.sh 

# Essential for large memory allocations on some systems
ulimit -l unlimited

# Activate your Medaka conda environment
conda activate medaka

# Check if environment activation was successful and tools are available
echo "--- Checking conda environment and tools ---" | tee -a "${LOG_FILE}"

if command -v conda &> /dev/null; then
    echo "conda is found in PATH." | tee -a "${LOG_FILE}"
else
    echo "ERROR: conda is NOT found in PATH. Check source path." | tee -a "${LOG_FILE}"
    exit 1
fi

CURRENT_CONDA_ENV=$(conda env list | grep "*" | awk '{print $1}')
echo "Currently active conda environment: ${CURRENT_CONDA_ENV}" | tee -a "${LOG_FILE}"
if [ "${CURRENT_CONDA_ENV}" != "medaka" ]; then
    echo "WARNING: 'medaka' environment not activated. Actual: ${CURRENT_CONDA_ENV}" | tee -a "${LOG_FILE}"
    # This might indicate the activation failed, or it's not in base
fi

if command -v minimap2 &> /dev/null; then
    echo "minimap2 is found in PATH." | tee -a "${LOG_FILE}"
    echo "minimap2 location: $(which minimap2)" | tee -a "${LOG_FILE}"
    echo "minimap2 version: $(minimap2 --version 2>&1)" | tee -a "${LOG_FILE}" # Get version to confirm it runs
else
    echo "ERROR: minimap2 is NOT found in PATH after activating medaka env. Is it installed?" | tee -a "${LOG_FILE}"
    exit 1
fi

if command -v samtools &> /dev/null; then
    echo "samtools is found in PATH." | tee -a "${LOG_FILE}"
    echo "samtools location: $(which samtools)" | tee -a "${LOG_FILE}"
    echo "samtools version: $(samtools --version | head -n 1)" | tee -a "${LOG_FILE}" # Get version to confirm it runs
else
    echo "ERROR: samtools is NOT found in PATH after activating medaka env. Is it installed?" | tee -a "${LOG_FILE}"
    exit 1
fi
echo "--- Conda environment and tools check complete ---" | tee -a "${LOG_FILE}"


# --- Input Parameters (passed as arguments to the sbatch script) ---
# Usage: sbatch minimap_script.sh <DATASET_ID> <ASSEMBLER_ID> <RAW_READS_FULLPATH> <DRAFT_ASSEMBLY_FULLPATH>
declare -r DATASET_ID="$1"
declare -r ASSEMBLER_ID="$2"
declare -r RAW_READS_FULLPATH="$3"
declare -r DRAFT_ASSEMBLY_FULLPATH="$4"

# --- Define Output Paths ---
OUTPUT_DIR="data/raven/lr-even"
mkdir -p "${OUTPUT_DIR}" # Ensure the output directory exists

declare -r ALIGNMENT_SAM_FILE="${OUTPUT_DIR}/${DATASET_ID}_${ASSEMBLER_ID}_alignment.sam"
declare -r ALIGNMENT_BAM_FILE="${OUTPUT_DIR}/${DATASET_ID}_${ASSEMBLER_ID}_calls_to_draft.bam"
declare -r LOG_FILE="logs/${DATASET_ID}_${ASSEMBLER_ID}_minimap_samtools.log" # Combined log for main commands

# Ensure the logs directory exists
mkdir -p logs

echo "--- Job Started: $(date) ---" | tee -a "${LOG_FILE}"
echo "Dataset ID: ${DATASET_ID}" | tee -a "${LOG_FILE}"
echo "Assembler ID: ${ASSEMBLER_ID}" | tee -a "${LOG_FILE}"
echo "Raw Reads: ${RAW_READS_FULLPATH}" | tee -a "${LOG_FILE}"
echo "Draft Assembly: ${DRAFT_ASSEMBLY_FULLPATH}" | tee -a "${LOG_FILE}"
echo "Output SAM: ${ALIGNMENT_SAM_FILE}" | tee -a "${LOG_FILE}"
echo "Output BAM: ${ALIGNMENT_BAM_FILE}" | tee -a "${LOG_FILE}"
echo "Requested CPUs: ${SLURM_CPUS_PER_TASK}" | tee -a "${LOG_FILE}"
echo "Requested Memory: ${SLURM_MEM}" | tee -a "${LOG_FILE}"

# --- Step 1: Run minimap2 for alignment ---
echo "Running minimap2 alignment..." | tee -a "${LOG_FILE}"
# minimap2 is now directly available because the environment is activated
minimap2 -ax map-ont \
    -t "${SLURM_CPUS_PER_TASK}" \
    "${DRAFT_ASSEMBLY_FULLPATH}" \
    "${RAW_READS_FULLPATH}" \
    > "${ALIGNMENT_SAM_FILE}" 2>> "${LOG_FILE}"

# Check if minimap2 was successful
if [ $? -ne 0 ]; then
    echo "ERROR: minimap2 alignment failed." | tee -a "${LOG_FILE}"
    exit 1
fi
echo "Minimap2 alignment completed successfully." | tee -a "${LOG_FILE}"

# --- Step 2: Convert SAM to BAM and Sort BAM ---
echo "Converting SAM to BAM and sorting..." | tee -a "${LOG_FILE}"

SAMTOOLS_SORT_THREADS=10
SAMTOOLS_SORT_MEM_PER_THREAD="1500M" # 1.5GB per thread

# samtools is now directly available
samtools view -bS "${ALIGNMENT_SAM_FILE}" 2>> "${LOG_FILE}" | \
    samtools sort -m "${SAMTOOLS_SORT_MEM_PER_THREAD}" -@ "${SAMTOOLS_SORT_THREADS}" -o "${ALIGNMENT_BAM_FILE}" 2>> "${LOG_FILE}"

if [ $? -ne 0 ]; then
    echo "ERROR: Samtools conversion/sorting failed." | tee -a "${LOG_FILE}"
    exit 1
fi
echo "Samtools conversion and sorting completed successfully." | tee -a "${LOG_FILE}"

# --- Step 3: Index the sorted BAM file ---
echo "Indexing BAM file..." | tee -a "${LOG_FILE}"
# samtools is now directly available
samtools index "${ALIGNMENT_BAM_FILE}" 2>> "${LOG_FILE}"

if [ $? -ne 0 ]; then
    echo "ERROR: Samtools indexing failed." | tee -a "${LOG_FILE}"
    exit 1
fi
echo "BAM file indexed successfully." | tee -a "${LOG_FILE}"

# --- Clean up intermediate SAM file (optional but recommended for disk space) ---
echo "Cleaning up intermediate SAM file: ${ALIGNMENT_SAM_FILE}" | tee -a "${LOG_FILE}"
rm -f "${ALIGNMENT_SAM_FILE}" 2>> "${LOG_FILE}"

echo "--- Job Finished: $(date) ---" | tee -a "${LOG_FILE}"