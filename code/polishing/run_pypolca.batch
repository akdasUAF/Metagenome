#!/bin/bash
#SBATCH --partition=t1small       # Your desired partition (e.g., t1small, long, highmem)
#SBATCH --ntasks=1                # We will run one main task (the script itself)
#SBATCH --cpus-per-task=24        # Request 24 CPU cores for this task (adjust as needed for pypolca -t)
#SBATCH --mem=64G                 # Request 64 GB of RAM for the entire job (adjust as needed)
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --job-name="Pypolca_Polishing"
#SBATCH --output=logs/slurm_pypolca_%j.log   # Standard output log (stdout from the job itself)
#SBATCH --error=logs/slurm_pypolca_err_%j.log # Standard error log (stderr from the job itself)

## Clean out any modules, then reload slurm (this might be site-specific, adjust if needed)
# module purge
# module load slurm

# IMPORTANT: Conda initialization for non-interactive shells
# Replace '/path/to/your/conda/installation/etc/profile.d/conda.sh' with the actual path
# where your Miniconda/Anaconda is installed.
# Example: source /home/wwinnett/miniconda3/etc/profile.d/conda.sh
source ~/miniconda3/etc/profile.d/conda.sh 

# Essential for large memory allocations on some systems
ulimit -l unlimited

# Activate your Pypolca conda environment
# Ensure you have created this environment and installed pypolca in it:
# conda create -n pypolca pypolca
# conda activate pypolca
# pypolca run ...
conda activate pypolca

# --- Input Parameters (passed as arguments to the sbatch script) ---
# Usage: sbatch pypolca_script.sh <GENOME_FASTA> <R1_FASTQ> <R2_FASTQ> <OUTPUT_PREFIX>
# Example: sbatch pypolca_script.sh data/raven/lr-even/assembly_raven_lr-even.fasta data/raw/short_reads/reads_R1.fastq data/raw/short_reads/reads_R2.fastq polished_assembly_lr-even_raven
declare -r GENOME_FASTA="$1"
declare -r R1_FASTQ="$2"
declare -r R2_FASTQ="$3"
declare -r OUTPUT_PREFIX="$4" # e.g., "polished_assembly_lr-even_raven"

# --- Define Output Paths ---
# OUTPUT_DIR is now set to 'data/polished'
OUTPUT_DIR="data/polished"
mkdir -p "${OUTPUT_DIR}" # Ensure the output directory exists
# mkdir -p "${OUTPUT_DIR}/${OUTPUT_PREFIX}" # Pypolca creates a subdirectory with OUTPUT_PREFIX inside OUTPUT_DIR

# Define a combined log file that pypolca will also write its stdout/stderr to
# This will be in addition to the SLURM job's main stdout/stderr logs
declare -r PYPOLCA_LOG_FILE="logs/pypolca_${OUTPUT_PREFIX}.log"

# Ensure the logs directory exists for PYPOLCA_LOG_FILE
mkdir -p logs

echo "--- Job Started: $(date) ---" >> "${PYPOLCA_LOG_FILE}"
echo "Input Genome: ${GENOME_FASTA}" >> "${PYPOLCA_LOG_FILE}"
echo "R1 Short Reads: ${R1_FASTQ}" >> "${PYPOLCA_LOG_FILE}"
echo "R2 Short Reads: ${R2_FASTQ}" >> "${PYPOLCA_LOG_FILE}"
echo "Output Prefix: ${OUTPUT_PREFIX}" >> "${PYPOLCA_LOG_FILE}"
echo "Base Output Directory: ${OUTPUT_DIR}" >> "${PYPOLCA_LOG_FILE}"
echo "Pypolca will output to: ${OUTPUT_DIR}/${OUTPUT_PREFIX}" >> "${PYPOLCA_LOG_FILE}"
echo "Requested CPUs: ${SLURM_CPUS_PER_TASK}" >> "${PYPOLCA_LOG_FILE}"
echo "Requested Memory: ${SLURM_MEM}" >> "${PYPOLCA_LOG_FILE}"
echo "Pypolca Log File: ${PYPOLCA_LOG_FILE}" >> "${PYPOLCA_LOG_FILE}"
echo "--- Conda Environment and Tool Check ---" >> "${PYPOLCA_LOG_FILE}"

if command -v conda &> /dev/null; then
    echo "conda is found in PATH." >> "${PYPOLCA_LOG_FILE}"
else
    echo "ERROR: conda is NOT found in PATH. Check source path." >> "${PYPOLCA_LOG_FILE}"
    exit 1
fi

CURRENT_CONDA_ENV=$(conda env list | grep "*" | awk '{print $1}')
echo "Currently active conda environment: ${CURRENT_CONDA_ENV}" >> "${PYPOLCA_LOG_FILE}"
if [ "${CURRENT_CONDA_ENV}" != "pypolca" ]; then
    echo "WARNING: 'pypolca' environment not activated. Actual: ${CURRENT_CONDA_ENV}" >> "${PYPOLCA_LOG_FILE}"
    # This might indicate the activation failed, or it's not in base
fi

if command -v pypolca &> /dev/null; then
    echo "pypolca is found in PATH." >> "${PYPOLCA_LOG_FILE}"
    echo "pypolca location: $(which pypolca)" >> "${PYPOLCA_LOG_FILE}"
    echo "pypolca version: $(pypolca --version 2>&1)" >> "${PYPOLCA_LOG_FILE}"
else
    echo "ERROR: pypolca is NOT found in PATH after activating pypolca env. Is it installed?" >> "${PYPOLCA_LOG_FILE}"
    exit 1
fi
echo "--- Conda Environment and Tool Check Complete ---" >> "${PYPOLCA_LOG_FILE}"


echo "Starting Pypolca polishing..." >> "${PYPOLCA_LOG_FILE}"

# --- Run Pypolca ---
# pypolca run -a <genome> -1 <R1 short reads file> -2 <R2 short reads file> -t <threads> -o <output directory> --careful
# Note: Pypolca creates a subdirectory within the -o path using the name you give it.
# So if -o is "data/polished/my_assembly_prefix", it will create that folder.
pypolca run \
    -a "${GENOME_FASTA}" \
    -1 "${R1_FASTQ}" \
    -2 "${R2_FASTQ}" \
    -t "${SLURM_CPUS_PER_TASK}" \
    -o "${OUTPUT_DIR}/${OUTPUT_PREFIX}" \
    --careful \
    >> "${PYPOLCA_LOG_FILE}" 2>&1 # Redirect pypolca's stdout and stderr to the combined log file

# Check if Pypolca was successful
if [ $? -ne 0 ]; then
    echo "ERROR: Pypolca polishing failed." >> "${PYPOLCA_LOG_FILE}"
    exit 1
fi
echo "Pypolca polishing completed successfully." >> "${PYPOLCA_LOG_FILE}"

echo "--- Job Finished: $(date) ---" >> "${PYPOLCA_LOG_FILE}"