#!/bin/bash
#SBATCH --partition=t1small
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=24
#SBATCH --mem=64G
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --job-name="Pypolca_Polishing"
#SBATCH --output=logs/slurm_pypolca_%j.log
#SBATCH --error=logs/slurm_pypolca_err_%j.log

set -e # Exit immediately if a command exits with a non-zero status.

source ~/miniconda3/etc/profile.d/conda.sh

ulimit -l unlimited

conda activate pypolca

declare -r GENOME_FASTA="$1"
declare -r R1_FASTQ_STR="$2"
declare -r R2_FASTQ_STR="$3"
declare -r OUTPUT_PREFIX="$4"

if [ "$#" -ne 4 ]; then
    echo "ERROR: Incorrect number of arguments."
    echo "Usage: sbatch $0 <GENOME_FASTA> <R1_FASTQ_COMMAS> <R2_FASTQ_COMMAS> <OUTPUT_PREFIX>"
    exit 1
fi

OUTPUT_DIR="data/polished"
mkdir -p "${OUTPUT_DIR}"

declare -r PYPOLCA_LOG_FILE="logs/pypolca_${OUTPUT_PREFIX}.log"
mkdir -p logs

exec &> >(tee -a "${PYPOLCA_LOG_FILE}")

echo "--- Job Started: $(date) ---"
echo "Input Genome: ${GENOME_FASTA}"

# Split comma-separated strings into arrays
IFS=',' read -r -a R1_FASTQ_ARRAY <<< "${R1_FASTQ_STR}"
IFS=',' read -r -a R2_FASTQ_ARRAY <<< "${R2_FASTQ_STR}"

echo "R1 Short Reads (parsed):"
for f in "${R1_FASTQ_ARRAY[@]}"; do
    echo "  - ${f}"
    if [ ! -f "${f}" ]; then
        echo "ERROR: R1 file not found: ${f}"
        exit 1
    fi
done

echo "R2 Short Reads (parsed):"
for f in "${R2_FASTQ_ARRAY[@]}"; do
    echo "  - ${f}"
    if [ ! -f "${f}" ]; then
        echo "ERROR: R2 file not found: ${f}"
        exit 1
    fi
done

if [ ${#R1_FASTQ_ARRAY[@]} -eq 0 ] || [ ${#R2_FASTQ_ARRAY[@]} -eq 0 ]; then
    echo "ERROR: No R1 or R2 FASTQ files found after splitting input strings. Check comma separation in arguments."
    exit 1
fi

if [ ${#R1_FASTQ_ARRAY[@]} -ne ${#R2_FASTQ_ARRAY[@]} ]; then
    echo "ERROR: Unequal number of R1 and R2 FASTQ files provided. They must be paired."
    exit 1
fi

echo "Output Prefix: ${OUTPUT_PREFIX}"
echo "Base Output Directory: ${OUTPUT_DIR}"
echo "Pypolca will output to: ${OUTPUT_DIR}/${OUTPUT_PREFIX}"
echo "Requested CPUs: ${SLURM_CPUS_PER_TASK}"
echo "Requested Memory: ${SLURM_MEM}"
echo "Pypolca Log File: ${PYPOLCA_LOG_FILE}"
echo "--- Conda Environment and Tool Check ---"

if command -v conda &> /dev/null; then
    echo "conda is found in PATH."
else
    echo "ERROR: conda is NOT found in PATH. Check source path."
    exit 1
fi

CURRENT_CONDA_ENV=$(conda env list | grep "*" | awk '{print $1}')
echo "Currently active conda environment: ${CURRENT_CONDA_ENV}"
if [ "${CURRENT_CONDA_ENV}" != "pypolca" ]; then
    echo "WARNING: 'pypolca' environment not activated. Actual: ${CURRENT_CONDA_ENV}"
fi

if command -v pypolca &> /dev/null; then
    echo "pypolca is found in PATH."
    echo "pypolca location: $(which pypolca)"
    echo "pypolca version: $(pypolca --version 2>&1)"
else
    echo "ERROR: pypolca is NOT found in PATH after activating pypolca env. Is it installed?"
    exit 1
fi
echo "--- Conda Environment and Tool Check Complete ---"

# ... (previous script content)

echo "Starting Pypolca polishing..."

# --- Construct Pypolca Command Array ---
# This is the key change to handle multiple read files correctly.
PYPOLCA_COMMAND_ARRAY=(
    pypolca run
    -a "${GENOME_FASTA}"
    -t "${SLURM_CPUS_PER_TASK}"
    -o "${OUTPUT_DIR}/${OUTPUT_PREFIX}"
    --careful
    --memory_limit 2G # Re-added this based on your previous pypolca log output. Adjust if you need more.
)

# Append R1 files by repeating '-1' for each file
for f in "${R1_FASTQ_ARRAY[@]}"; do
    PYPOLCA_COMMAND_ARRAY+=("-1" "${f}")
done

# Append R2 files by repeating '-2' for each file
for f in "${R2_FASTQ_ARRAY[@]}"; do
    PYPOLCA_COMMAND_ARRAY+=("-2" "${f}")
done

# --- Debugging: Print the exact command being executed ---
# This line will show the full pypolca command that Bash constructs.
set -x
"${PYPOLCA_COMMAND_ARRAY[@]}" # Execute the command from the array
set +x # Turn off debugging output immediately after the command

# Check if Pypolca was successful
if [ $? -ne 0 ]; then
    echo "ERROR: Pypolca polishing failed with exit code $?."
    exit 1
fi
echo "Pypolca polishing completed successfully."

echo "--- Job Finished: $(date) ---"

conda deactivate