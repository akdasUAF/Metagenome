#!/bin/bash
#SBATCH --partition=t1small
#SBATCH --ntasks=24
#SBATCH --tasks-per-node=24
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN
#SBATCH --mail-type=END
#SBATCH --mail-type=FAIL
#SBATCH --job-name="medaka_polishing"
#SBATCH --output=logs/slurm_job_%j.log
#SBATCH --error=logs/slurm_job_err_%j.log
#

## Clean out any modules, then reload slurm
module purge
module load slurm

ulimit -l unlimited

# --- SECTION 1: USER CONFIGURATION & ARGUMENT PARSING ---

# Parse Command-Line Arguments
# $1: dataset_id (e.g., lr-even)
# $2: assembler_id (e.g., flye)
# $3: raw_reads_fullpath (e.g., data/raw/lr-even/lr-even_raw.fastq)
# $4: draft_assembly_fullpath (e.g., data/flye/lr-even/assembly.fasta)
if [ "$#" -ne 4 ]; then
    echo "Usage: sbatch $0 <dataset_id> <assembler_id> <raw_reads_fullpath> <draft_assembly_fullpath>" | tee /dev/stderr
    echo "Example: sbatch $0 lr-even flye data/raw/lr-even/lr-even_raw.fastq data/flye/lr-even/assembly.fasta" | tee /dev/stderr
    exit 1
fi

declare -r DATASET_ID="$1"
declare -r ASSEMBLER_ID="$2"
declare -r RAW_READS_FULLPATH="$3"
declare -r DRAFT_ASSEMBLY_FULLPATH="$4"

# Verify input files exist before proceeding
if [ ! -f "${RAW_READS_FULLPATH}" ]; then
    echo "ERROR: Raw reads file not found: ${RAW_READS_FULLPATH}" | tee /dev/stderr
    exit 1
fi
if [ ! -f "${DRAFT_ASSEMBLY_FULLPATH}" ]; then
    echo "ERROR: Draft assembly file not found: ${DRAFT_ASSEMBLY_FULLPATH}" | tee /dev/stderr
    exit 1
fi

# Conda Environment Names
declare -r MINIMAP2_ENV_NAME="align_minimap2" # Minimap2 is needed for Medaka's internal alignment
declare -r MEDAKA_ENV_NAME="medaka"

# --- SECTION 2: DERIVED PATHS & LOGGING SETUP ---

# A common base for polished outputs (useful for aligning to this path structure)
declare -r POLISHED_BASE_DIR="data/${ASSEMBLER_ID}/${DATASET_ID}"

# Medaka-specific output directory
declare -r MEDAKA_OUTPUT_DIR="${POLISHED_BASE_DIR}/medaka_polished"

# Intermediate files for alignment
declare -r ALIGNMENT_DIR="${POLISHED_BASE_DIR}/alignment"
mkdir -p "${ALIGNMENT_DIR}" || { echo "ERROR: Could not create alignment directory ${ALIGNMENT_DIR}"; exit 1; }

# NOTE: We are no longer creating MINIMAP2_RAW_SAM as a separate file.
# The SAM output will be piped directly.
# declare -r MINIMAP2_RAW_SAM="${ALIGNMENT_DIR}/reads_to_draft_${ASSEMBLER_ID}_${DATASET_ID}.sam"

declare -r ALIGNED_SORTED_BAM="${ALIGNMENT_DIR}/reads_to_draft_${ASSEMBLER_ID}_${DATASET_ID}.sorted.bam"
declare -r ALIGNED_SORTED_BAM_IDX="${ALIGNMENT_DIR}/reads_to_draft_${ASSEMBLER_ID}_${DATASET_ID}.sorted.bam.bai"

# Detailed command log file (separate from SLURM's job logs)
declare -r LOG_DIR="data/${ASSEMBLER_ID}/logs"
mkdir -p "${LOG_DIR}" || { echo "ERROR: Could not create log directory ${LOG_DIR}"; exit 1; }
declare -r path_log="${LOG_DIR}/medaka_commands_${ASSEMBLER_ID}_${DATASET_ID}.log"

# Clear the log file at the start of the script
> "${path_log}"

echo "Script started at $(date)" | tee -a "${path_log}"
echo "Configuration:" | tee -a "${path_log}"
echo "  Dataset ID: ${DATASET_ID}" | tee -a "${path_log}"
echo "  Assembler ID: ${ASSEMBLER_ID}" | tee -a "${path_log}"
echo "  Raw Reads Full Path: ${RAW_READS_FULLPATH}" | tee -a "${path_log}"
echo "  Draft Assembly Full Path: ${DRAFT_ASSEMBLY_FULLPATH}" | tee -a "${path_log}"
echo "  Minimap2 Env: ${MINIMAP2_ENV_NAME}" | tee -a "${path_log}"
echo "  Medaka Env: ${MEDAKA_ENV_NAME}" | tee -a "${path_log}"
echo "" | tee -a "${path_log}"


# --- SECTION 3: ALIGNMENT WITH MINIMAP2 AND SAMTOOLS ---
echo "########## Running Alignment Stage (Minimap2 & Samtools) ##########" | tee -a "${path_log}"

echo "Running Minimap2: Aligning reads to draft assembly and piping to Samtools..." | tee -a "${path_log}"
# The critical change is to pipe minimap2's STDOUT directly to samtools view's STDIN.
# Minimap2's STDERR (progress messages) are still captured by tee.
conda run -n "${MINIMAP2_ENV_NAME}" minimap2 -ax map-ont \
    -t 24 \
    "${DRAFT_ASSEMBLY_FULLPATH}" \
    "${RAW_READS_FULLPATH}" \
    2> >(tee -a "${path_log}" >&2) | \ # Redirect stderr to tee, then back to stderr, while stdout goes to pipe
conda run -n "${MINIMAP2_ENV_NAME}" samtools view -bS -@ 24 - | \ # Read SAM from stdin (-)
conda run -n "${MINIMAP2_ENV_NAME}" samtools sort -@ 24 -o "${ALIGNED_SORTED_BAM}" 2>&1 | tee -a "${path_log}"

# Check the exit status of the entire pipeline
if [ $? -ne 0 ]; then echo "ERROR: Alignment pipeline (Minimap2 & Samtools) failed." | tee -a "${path_log}"; exit 1; fi


echo "Indexing sorted BAM file..." | tee -a "${path_log}"
# samtools index: create BAM index (.bai)
conda run -n "${MINIMAP2_ENV_NAME}" samtools index -@ 24 "${ALIGNED_SORTED_BAM}" 2>&1 | tee -a "${path_log}"
if [ $? -ne 0 ]; then echo "ERROR: Samtools indexing failed." | tee -a "${path_log}"; exit 1; fi


# --- SECTION 4: MEDAKA POLISHING ---
echo "########## Running Medaka Polishing Stage ##########" | tee -a "${path_log}"

mkdir -p "${MEDAKA_OUTPUT_DIR}" || { echo "ERROR: Could not create Medaka output directory ${MEDAKA_OUTPUT_DIR}"; exit 1; } | tee -a "${path_log}";

echo "Running Medaka inference (polishing)..." | tee -a "${path_log}"

conda run -n "${MEDAKA_ENV_NAME}" medaka \
    inference \
    --reads "${ALIGNED_SORTED_BAM}" \ # This is now correctly pointing to the BAM file
    --draft "${DRAFT_ASSEMBLY_FULLPATH}" \
    --out_dir "${MEDAKA_OUTPUT_DIR}" \
    --model r941_min_high_g360 \
    --threads 24 2>&1 | tee -a "${path_log}"

if [ $? -ne 0 ]; then
    echo "ERROR: Medaka failed." | tee -a "${path_log}"
    exit 1
fi

echo "Medaka polishing completed. Final polished assembly will be in: ${MEDAKA_OUTPUT_DIR}/consensus.fasta" | tee -a "${path_log}"

echo "Script finished at $(date)" | tee -a "${path_log}"