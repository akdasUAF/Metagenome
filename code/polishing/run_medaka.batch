#!/bin/bash
#SBATCH --partition=t1small       # Or your preferred partition
#SBATCH --ntasks=1                # Total number of tasks
#SBATCH --cpus-per-task=24        # Number of CPU cores per task (adjust as needed for --threads)
#SBATCH --mem=64G                 # Total memory for the job (adjust based on assembly/read size)
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --job-name="medaka_polish_prealigned" # Changed job name
#SBATCH --output=logs/slurm_medaka_prealigned_%j.log # Changed log file name
#SBATCH --error=logs/slurm_medaka_prealigned_err_%j.log # Changed log file name

# Set unlimited locked memory for processes (good for large jobs)
ulimit -l unlimited
ulimit -n 65536 # Increase open file descriptor limit if needed

# --- Conda Initialization ---
CONDA_BASE=$(conda info --base)
if [ -f "${CONDA_BASE}/etc/profile.d/conda.sh" ]; then
    . "${CONDA_BASE}/etc/profile.d/conda.sh"
    echo "Conda initialized from ${CONDA_BASE}/etc/profile.d/conda.sh"
else
    echo "ERROR: conda.sh not found at ${CONDA_BASE}/etc/profile.d/conda.sh."
    echo "Please ensure Conda is installed and 'conda init bash' has been run."
    exit 1
fi

# --- 1. User Configuration & Argument Parsing ---
# Input arguments for this script:
# $1: <dataset_name> (e.g., "lr-even")
# $2: <assembler_name> (e.g., "raven")
# $3: <aligned_reads_bam_path> (Full path to your pre-aligned and indexed BAM file)
# $4: <draft_assembly_fasta_path> (Full path to draft assembly file)
if [ "$#" -ne 4 ]; then
    echo "Usage: sbatch $0 <dataset_name> <assembler_name> <aligned_reads_bam_path> <draft_assembly_fasta_path>"
    echo "Example: sbatch $0 lr-even raven data/raven/lr-even/lr-even_raven_calls_to_draft.bam data/raven/lr-even/assembly_raven_lr-even.fasta"
    exit 1
fi

declare -r DATASET_NAME="$1"
declare -r ASSEMBLER_NAME="$2"
declare -r ALIGNED_READS_BAM_FULLPATH="$3"
declare -r DRAFT_ASSEMBLY_FULLPATH="$4"

# Conda Environment Name
declare -r MEDAKA_ENV_NAME="medaka"

# Medaka Model to use
declare -r MEDAKA_MODEL="r941_min_hac_g507"

# --- 2. Derived Paths & Logging Setup ---
declare -r OUTPUT_BASE_DIR="data/${ASSEMBLER_NAME}/${DATASET_NAME}/medaka_polish_results_prealigned"

declare -r LOG_DIR="${OUTPUT_BASE_DIR}/logs"
declare -r FEATURES_DIR="${OUTPUT_BASE_DIR}/medaka_features" # For medaka features output
declare -r INFERENCE_DIR="${OUTPUT_BASE_DIR}/medaka_inference" # For medaka inference output
declare -r POLISHED_ASSEMBLY_DIR="${OUTPUT_BASE_DIR}/polished_assembly" # For final consensus.fasta

# Create necessary directories
mkdir -p "${LOG_DIR}" || { echo "ERROR: Could not create log directory ${LOG_DIR}"; exit 1; }
mkdir -p "${FEATURES_DIR}" || { echo "ERROR: Could not create features directory ${FEATURES_DIR}"; exit 1; }
mkdir -p "${INFERENCE_DIR}" || { echo "ERROR: Could not create inference directory ${INFERENCE_DIR}"; exit 1; }
mkdir -p "${POLISHED_ASSEMBLY_DIR}" || { echo "ERROR: Could not create polished assembly directory ${POLISHED_ASSEMBLY_DIR}"; exit 1; }


declare -r path_log="${LOG_DIR}/${DATASET_NAME}_${ASSEMBLER_NAME}_medaka_prealigned_workflow.log"
> "${path_log}"
exec &> >(tee -a "${path_log}")

echo "Script started at $(date)"
echo "Configuration:"
echo "  Dataset Name: ${DATASET_NAME}"
echo "  Assembler Name: ${ASSEMBLER_NAME}"
echo "  Aligned Reads BAM: ${ALIGNED_READS_BAM_FULLPATH}"
echo "  Draft Assembly: ${DRAFT_ASSEMBLY_FULLPATH}"
echo "  Medaka Env: ${MEDAKA_ENV_NAME}"
echo "  Medaka Model: ${MEDAKA_MODEL}"
echo "  Output Base Directory: ${OUTPUT_BASE_DIR}"
echo ""

if [ ! -f "${ALIGNED_READS_BAM_FULLPATH}" ]; then
    echo "ERROR: Aligned reads BAM file not found: ${ALIGNED_READS_BAM_FULLPATH}"
    exit 1
fi
if [ ! -f "${ALIGNED_READS_BAM_FULLPATH}.bai" ]; then
    echo "ERROR: BAM index file not found: ${ALIGNED_READS_BAM_FULLPATH}.bai"
    echo "Please ensure your BAM file is indexed (e.g., with 'samtools index')."
    exit 1
fi
if [ ! -f "${DRAFT_ASSEMBLY_FULLPATH}" ]; then
    echo "ERROR: Draft assembly file not found: ${DRAFT_ASSEMBLY_FULLPATH}"
    exit 1
fi

echo "Current memory usage before Medaka:"
free -h

# --- 3. Medaka Polishing (Three-Step Process for Medaka 2.0.1) ---
echo "########## Running Medaka Polishing Stage (Three-Step) ##########"

echo "Activating Medaka environment: ${MEDAKA_ENV_NAME}"
conda activate "${MEDAKA_ENV_NAME}"

echo "Medaka version:"
conda run -n "${MEDAKA_ENV_NAME}" medaka --version

if ! command -v medaka &> /dev/null; then
    echo "ERROR: 'medaka' command not found after activating environment. Please ensure Medaka is installed correctly in '${MEDAKA_ENV_NAME}'."
    exit 1
fi

# --- Step 1/3: Generate Features ---
echo "--- Step 1/3: Running Medaka features to create variant features ---"
# Medaka features requires the BAM and an output directory (for features).
# The draft is not a direct input to 'features' in this version, it relies on the BAM being aligned to it.
echo "Command: medaka features ${ALIGNED_READS_BAM_FULLPATH} ${FEATURES_DIR} --threads ${SLURM_CPUS_PER_TASK}"

set -x
conda run -n "${MEDAKA_ENV_NAME}" medaka features \
    "${ALIGNED_READS_BAM_FULLPATH}" \
    "${FEATURES_DIR}" \
    --threads "${SLURM_CPUS_PER_TASK}"
set +x

if [ $? -ne 0 ]; then
    echo "ERROR: Medaka features step failed. Exit status: $?."
    exit 1
fi

echo "Medaka features generation completed. Features are in: ${FEATURES_DIR}"


# --- Step 2/3: Run Inference (Apply Model to Features) ---
echo "--- Step 2/3: Running Medaka inference to apply model to features ---"
# Medaka inference takes features and outputs inference results.
# Note: The 'inference' command's --help also shows 'bam output', but the general Medaka help suggests it works with features.
# It seems `medaka inference` when used with features might be implicit, or it's designed to take a *directory* of features.
# Let's try passing the features directory to it as the 'bam' argument from its help, and the inference output directory.
# This is a bit of a guess based on the 'sequence' subcommand's description.
echo "Command: medaka inference ${FEATURES_DIR} ${INFERENCE_DIR} --model ${MEDAKA_MODEL}"

set -x
conda run -n "${MEDAKA_ENV_NAME}" medaka inference \
    "${FEATURES_DIR}" \
    "${INFERENCE_DIR}" \
    --model "${MEDAKA_MODEL}"
set +x

if [ $? -ne 0 ]; then
    echo "ERROR: Medaka inference (from features) step failed. Exit status: $?."
    exit 1
fi

echo "Medaka inference completed. Inference results are in: ${INFERENCE_DIR}"


# --- Step 3/3: Generate Consensus Sequence from Inference Results ---
echo "--- Step 3/3: Running Medaka sequence to produce final polished assembly ---"
# Medaka sequence takes the inference output directory and the original draft to produce the consensus.
echo "Command: medaka sequence ${INFERENCE_DIR} ${DRAFT_ASSEMBLY_FULLPATH} ${POLISHED_ASSEMBLY_DIR}"

set -x
conda run -n "${MEDAKA_ENV_NAME}" medaka sequence \
    "${INFERENCE_DIR}" \
    "${DRAFT_ASSEMBLY_FULLPATH}" \
    "${POLISHED_ASSEMBLY_DIR}"
set +x

if [ $? -ne 0 ]; then
    echo "ERROR: Medaka sequence step failed. Exit status: $?."
    exit 1
fi

echo "Medaka polishing completed. Final polished assembly will be in: ${POLISHED_ASSEMBLY_DIR}/consensus.fasta"
echo "Script finished at $(date)"

# Deactivate conda environment
conda deactivate