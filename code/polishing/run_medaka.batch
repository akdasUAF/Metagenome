#!/bin/bash
#SBATCH --partition=t1small       # Or your preferred partition
#SBATCH --ntasks=1                # Total number of tasks
#SBATCH --cpus-per-task=24        # Number of CPU cores per task (adjust as needed for --threads)
#SBATCH --mem=64G                 # Total memory for the job (adjust based on assembly/read size)
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --job-name="medaka_polish_consensus" # Changed job name
#SBATCH --output=logs/slurm_medaka_consensus_%j.log # Changed log file name
#SBATCH --error=logs/slurm_medaka_consensus_err_%j.log # Changed log file name

# Set unlimited locked memory for processes (good for large jobs)
ulimit -l unlimited
ulimit -n 65536 # Increase open file descriptor limit if needed

module load slurm

# --- Conda Initialization ---
CONDA_BASE=$(conda info --base)
if [ -f "${CONDA_BASE}/etc/profile.d/conda.sh" ]; then
    . "${CONDA_BASE}/etc/profile.d/conda.sh"
    echo "Conda initialized from ${CONDA_BASE}/etc/profile.d/conda.sh"
else
    echo "ERROR: conda.sh not found at ${CONDA_BASE}/etc/profile.d/conda.sh."
    echo "Please ensure Conda is installed and 'conda init bash' has been run."
    exit 1
fi

# --- 1. User Configuration & Argument Parsing ---
# Input arguments for this script:
# $1: <dataset_name> (e.g., "lr-even")
# $2: <assembler_name> (e.g., "raven")
# $3: <raw_reads_fastq_path> (Full path to your raw long reads FASTQ file)
# $4: <draft_assembly_fasta_path> (Full path to draft assembly file)
if [ "$#" -ne 4 ]; then
    echo "Usage: sbatch $0 <dataset_name> <assembler_name> <raw_reads_fastq_path> <draft_assembly_fasta_path>"
    echo "Example: sbatch $0 lr-even raven data/lr-even_raw_reads.fastq data/raven/lr-even/assembly_raven_lr-even.fasta"
    exit 1
fi

declare -r DATASET_NAME="$1"
declare -r ASSEMBLER_NAME="$2"
declare -r RAW_READS_FASTQ_FULLPATH="$3"
declare -r DRAFT_ASSEMBLY_FULLPATH="$4"

# Conda Environment Name (updated for 1.11.3 install)
declare -r MEDAKA_ENV_NAME="medaka_1.11.3" # Assuming minimap2 and samtools are also in this env or generally available
# If minimap2/samtools are in separate envs, you'll need to activate/deactivate them.
# A common practice is to have a "bioinformatics" env with common tools or install them in the medaka env.

# Medaka Model to use (keep the one you chose)
declare -r MEDAKA_MODEL="r941_min_hac_g507"

# --- 2. Derived Paths & Logging Setup ---
declare -r OUTPUT_BASE_DIR="data/${ASSEMBLER_NAME}/${DATASET_NAME}/medaka_polish_results_consensus_command"

declare -r LOG_DIR="${OUTPUT_BASE_DIR}/logs"
declare -r ALIGNMENT_DIR="${OUTPUT_BASE_DIR}/alignment" # New directory for alignment files
declare -r POLISHED_ASSEMBLY_DIR="${OUTPUT_BASE_DIR}/polished_assembly"

# Create necessary directories
mkdir -p "${LOG_DIR}" || { echo "ERROR: Could not create log directory ${LOG_DIR}"; exit 1; }
mkdir -p "${ALIGNMENT_DIR}" || { echo "ERROR: Could not create alignment directory ${ALIGNMENT_DIR}"; exit 1; } # Create new dir
mkdir -p "${POLISHED_ASSEMBLY_DIR}" || { echo "ERROR: Could not create polished assembly directory ${POLISHED_ASSEMBLY_DIR}"; exit 1; }


declare -r path_log="${LOG_DIR}/${DATASET_NAME}_${ASSEMBLER_NAME}_medaka_consensus_workflow.log"
> "${path_log}"
exec &> >(tee -a "${path_log}")

echo "Script started at $(date)"
echo "Configuration:"
echo "  Dataset Name: ${DATASET_NAME}"
echo "  Assembler Name: ${ASSEMBLER_NAME}"
echo "  Raw Reads FASTQ: ${RAW_READS_FASTQ_FULLPATH}"
echo "  Draft Assembly: ${DRAFT_ASSEMBLY_FULLPATH}"
echo "  Medaka Env: ${MEDAKA_ENV_NAME}"
echo "  Medaka Model: ${MEDAKA_MODEL}"
echo "  Output Base Directory: ${OUTPUT_BASE_DIR}"
echo ""

if [ ! -f "${RAW_READS_FASTQ_FULLPATH}" ]; then
    echo "ERROR: Raw reads FASTQ file not found: ${RAW_READS_FASTQ_FULLPATH}"
    exit 1
fi
if [ ! -f "${DRAFT_ASSEMBLY_FULLPATH}" ]; then
    echo "ERROR: Draft assembly file not found: ${DRAFT_ASSEMBLY_FULLPATH}"
    exit 1
fi

echo "Current memory usage before Medaka:"
free -h

# --- Activate Medaka environment (which should also have minimap2 and samtools) ---
echo "Activating Medaka environment: ${MEDAKA_ENV_NAME}"
conda activate "${MEDAKA_ENV_NAME}"

# Verify essential tools
if ! command -v minimap2 &> /dev/null; then
    echo "ERROR: 'minimap2' command not found after activating environment. Please ensure minimap2 is installed correctly in '${MEDAKA_ENV_NAME}'."
    exit 1
fi
if ! command -v samtools &> /dev/null; then
    echo "ERROR: 'samtools' command not found after activating environment. Please ensure samtools is installed correctly in '${MEDAKA_ENV_NAME}'."
    exit 1
fi
if ! command -v medaka &> /dev/null; then
    echo "ERROR: 'medaka' command not found after activating environment. Please ensure Medaka is installed correctly in '${MEDAKA_ENV_NAME}'."
    exit 1
fi

echo "Medaka version:"
medaka --version
echo "Minimap2 version:"
minimap2 --version
echo "Samtools version:"
samtools --version

# --- 3. Align Reads to Draft Assembly (Minimap2) ---
echo "########## Running Minimap2 Alignment ##########"

declare -r ALIGNED_BAM="${ALIGNMENT_DIR}/${DATASET_NAME}_${ASSEMBLER_NAME}_aligned_reads.bam"

echo "--- Running minimap2 for alignment ---"
echo "Command: minimap2 -ax map-ont -t ${SLURM_CPUS_PER_TASK} ${DRAFT_ASSEMBLY_FULLPATH} ${RAW_READS_FASTQ_FULLPATH} | samtools view -F 0x4 -b - | samtools sort -o ${ALIGNED_BAM} -"

set -x
minimap2 -ax map-ont -t "${SLURM_CPUS_PER_TASK}" "${DRAFT_ASSEMBLY_FULLPATH}" "${RAW_READS_FASTQ_FULLPATH}" | \
    samtools view -F 0x4 -b - | \
    samtools sort -o "${ALIGNED_BAM}" -
set +x

if [ $? -ne 0 ]; then
    echo "ERROR: Minimap2 alignment step failed. Exit status: $?."
    exit 1
fi

echo "--- Indexing BAM file ---"
echo "Command: samtools index ${ALIGNED_BAM}"

set -x
samtools index "${ALIGNED_BAM}"
set +x

if [ $? -ne 0 ]; then
    echo "ERROR: Samtools indexing step failed. Exit status: $?."
    exit 1
fi

echo "Minimap2 alignment and indexing completed. Aligned BAM: ${ALIGNED_BAM}"



# --- 4. Medaka Polishing using 'medaka consensus' ---
echo "########## Running Medaka Polishing Stage (using 'medaka consensus') ##########"

echo "--- Running Medaka consensus for polishing ---"
# medaka consensus takes: -i <input_reads>, -d <draft_assembly>, -o <output_directory>
# Now, -i will be the aligned BAM file
echo "Command: medaka consensus -i ${ALIGNED_BAM} -d ${DRAFT_ASSEMBLY_FULLPATH} -o ${POLISHED_ASSEMBLY_DIR} -m ${MEDAKA_MODEL} -t ${SLURM_CPUS_PER_TASK}"

set -x
# REMOVE 'conda run -n "${MEDAKA_ENV_NAME}"' from this line:
medaka_consensus \
    -i "${ALIGNED_BAM}" \
    -d "${DRAFT_ASSEMBLY_FULLPATH}" \
    -o "${POLISHED_ASSEMBLY_DIR}" \
    -m "${MEDAKA_MODEL}" \
    -t "${SLURM_CPUS_PER_TASK}"
set +x

if [ $? -ne 0 ]; then
    echo "ERROR: Medaka consensus step failed. Exit status: $?."
    exit 1
fi

echo "Medaka polishing completed. Final polished assembly should be in: ${POLISHED_ASSEMBLY_DIR}/consensus.fasta"
echo "Script finished at $(date)"

# Deactivate conda environment
conda deactivate