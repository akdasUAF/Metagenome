#!/bin/bash
#SBATCH --partition=t1small       # Or your preferred partition
#SBATCH --ntasks=1                # Total number of tasks
#SBATCH --cpus-per-task=24        # Number of CPU cores per task (adjust as needed for --threads)
#SBATCH --mem=64G                 # Total memory for the job (adjust based on assembly/read size)
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --job-name="medaka_consensus_simple" # Simplified job name
#SBATCH --output=logs/slurm_medaka_consensus_simple_%j.log # Simplified log file name
#SBATCH --error=logs/slurm_medaka_consensus_simple_err_%j.log # Simplified log file name

# Set unlimited locked memory for processes (good for large jobs)
ulimit -l unlimited
ulimit -n 65536 # Increase open file descriptor limit if needed

module load slurm

# --- Conda Initialization ---
CONDA_BASE=$(conda info --base)
if [ -f "${CONDA_BASE}/etc/profile.d/conda.sh" ]; then
    . "${CONDA_BASE}/etc/profile.d/conda.sh"
    echo "Conda initialized from ${CONDA_BASE}/etc/profile.d/conda.sh"
else
    echo "ERROR: conda.sh not found at ${CONDA_BASE}/etc/profile.d/conda.sh."
    echo "Please ensure Conda is installed and 'conda init bash' has been run."
    exit 1
fi

# --- 1. User Configuration & Argument Parsing ---
# Input arguments for this script:
# $1: <dataset_name> (e.g., "lr-even")
# $2: <assembler_name> (e.g., "raven")
# $3: <test_number> (e.g., "test5") # NEW ARGUMENT
# $4: <raw_reads_fastq_path> (Full path to your raw long reads FASTQ file)
# $5: <draft_assembly_fasta_path> (Full path to draft assembly file)
if [ "$#" -ne 5 ]; then # Changed to 5 arguments
    echo "Usage: sbatch $0 <dataset_name> <assembler_name> <test_number> <raw_reads_fastq_path> <draft_assembly_fasta_path>"
    echo "Example: sbatch $0 lr-even raven test5 data/lr-even_raw_reads.fastq data/raven/lr-even/assembly_raven_lr-even.fasta"
    exit 1
fi

declare -r DATASET_NAME="$1"
declare -r ASSEMBLER_NAME="$2"
declare -r TEST_NUMBER="$3" # Capture the new argument
declare -r RAW_READS_FASTQ_FULLPATH="$4" # This will be the -i input
declare -r DRAFT_ASSEMBLY_FULLPATH="$5"

# Conda Environment Name
declare -r MEDAKA_ENV_NAME="medaka_1.11.3"

# Medaka Model to use
declare -r MEDAKA_MODEL="r941_min_hac_g507"

# --- 2. Derived Paths & Logging Setup ---
# Modified OUTPUT_BASE_DIR to include TEST_NUMBER
declare -r OUTPUT_BASE_DIR="data/${ASSEMBLER_NAME}/${DATASET_NAME}/${TEST_NUMBER}/medaka_consensus_simple_run"

declare -r LOG_DIR="${OUTPUT_BASE_DIR}/logs"
declare -r POLISHED_ASSEMBLY_FINAL_OUTPUT="${OUTPUT_BASE_DIR}" # Medaka consensus outputs directly to this dir

# Create necessary directories
mkdir -p "${LOG_DIR}" || { echo "ERROR: Could not create log directory ${LOG_DIR}"; exit 1; }
mkdir -p "${POLISHED_ASSEMBLY_FINAL_OUTPUT}" || { echo "ERROR: Could not create output directory ${POLISHED_ASSEMBLY_FINAL_OUTPUT}"; exit 1; }


declare -r path_log="${LOG_DIR}/${DATASET_NAME}_${ASSEMBLER_NAME}_${TEST_NUMBER}_medaka_consensus_simple.log" # Added TEST_NUMBER to log name for clarity
> "${path_log}"
exec &> >(tee -a "${path_log}")

echo "Script started at $(date)"
echo "Configuration:"
echo "  Dataset Name: ${DATASET_NAME}"
echo "  Assembler Name: ${ASSEMBLER_NAME}"
echo "  Test Number: ${TEST_NUMBER}" # Echo the new variable
echo "  Raw Reads FASTQ: ${RAW_READS_FASTQ_FULLPATH}"
echo "  Draft Assembly: ${DRAFT_ASSEMBLY_FULLPATH}"
echo "  Medaka Env: ${MEDAKA_ENV_NAME}"
echo "  Medaka Model: ${MEDAKA_MODEL}"
echo "  Output Base Directory: ${OUTPUT_BASE_DIR}"
echo ""

if [ ! -f "${RAW_READS_FASTQ_FULLPATH}" ]; then
    echo "ERROR: Raw reads FASTQ file not found: ${RAW_READS_FASTQ_FULLPATH}"
    exit 1
fi
if [ ! -f "${DRAFT_ASSEMBLY_FULLPATH}" ]; then
    echo "ERROR: Draft assembly file not found: ${DRAFT_ASSEMBLY_FULLPATH}"
    exit 1
fi

echo "Current memory usage before Medaka:"
free -h

# --- Activate Medaka environment ---
echo "Activating Medaka environment: ${MEDAKA_ENV_NAME}"
conda activate "${MEDAKA_ENV_NAME}"

# Verify Medaka and its internal dependencies (minimap2, samtools) are available
if ! command -v medaka_consensus &> /dev/null; then # Explicitly check for medaka_consensus
    echo "ERROR: 'medaka_consensus' command not found after activating environment. Please ensure Medaka is installed correctly in '${MEDAKA_ENV_NAME}'."
    exit 1
fi
# Medaka should handle minimap2/samtools internally, no need for separate checks here.

echo "Medaka version:"
medaka --version # Or medaka_version_report

# --- 3. Run Medaka Consensus (single step) ---
echo "########## Running Medaka Consensus (Single Step) ##########"

# Based on your medaka_consensus help and observed behavior,
# it expects FASTQ for -i, FASTA for -d, and will do internal alignment.
echo "Command: medaka_consensus -i ${RAW_READS_FASTQ_FULLPATH} -d ${DRAFT_ASSEMBLY_FULLPATH} -o ${POLISHED_ASSEMBLY_FINAL_OUTPUT} -m ${MEDAKA_MODEL} -t ${SLURM_CPUS_PER_TASK}"

set -x
medaka_consensus \
    -i "${RAW_READS_FASTQ_FULLPATH}" \
    -d "${DRAFT_ASSEMBLY_FULLPATH}" \
    -o "${POLISHED_ASSEMBLY_FINAL_OUTPUT}" \
    -m "${MEDAKA_MODEL}" \
    -t "${SLURM_CPUS_PER_TASK}"
set +x

if [ $? -ne 0 ]; then
    echo "ERROR: Medaka consensus step failed. Exit status: $?."
    exit 1
fi

echo "Medaka polishing completed. Final polished assembly should be in: ${POLISHED_ASSEMBLY_FINAL_OUTPUT}/consensus.fasta"
echo "Script finished at $(date)"

# Deactivate conda environment
conda deactivate