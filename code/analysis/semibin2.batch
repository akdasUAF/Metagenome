#!/usr/bin/env bash
#SBATCH --partition=t1small
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=24
#SBATCH --mem=64G
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --job-name=semibin2
#SBATCH --output=logs/slurm_semibin2_%j.log
#SBATCH --error=logs/slurm_semibin2_%j.log.err

# Set unlimited locked memory for processes (good for large jobs)
ulimit -l unlimited
ulimit -n 65536 # Increase open file descriptor limit if needed

set -euo pipefail

module load slurm
module load GCC/11.3.0
module load SAMtools/1.17
module load IPython/8.5.0
#module load BCFtools/1.17
# module load HTSlib/1.17

# --- Conda Initialization ---
CONDA_BASE=$(conda info --base)
if [ -f "${CONDA_BASE}/etc/profile.d/conda.sh" ]; then
    . "${CONDA_BASE}/etc/profile.d/conda.sh"
    echo "Conda initialized from ${CONDA_BASE}/etc/profile.d/conda.sh"
else
    echo "ERROR: conda.sh not found at ${CONDA_BASE}/etc/profile.d/conda.sh."
    echo "Please ensure Conda is installed and 'conda init bash' has been test."
    exit 1
fi

if [ $# -ne 6 ]; then
  echo "Usage: $0 <dataset> <assembler> <test> <raw_reads> <contigs_fasta> <reference_fasta>"
  exit 1
fi

# Variables
dataset=$1
assembler=$2
test=$3
raw_reads=$4
contigs_fasta=$5
reference_fasta=$6

workdir="data/${assembler}/${dataset}/${test}/mapping/"
aligned_bam="${workdir}/${assembler}_${dataset}_${test}_mapped_sorted.bam"
aligned_list="${workdir}/${assembler}_${dataset}_${test}_mapped_sorted.lst"
data_split="${workdir}/data_split.csv"

mkdir -p "${workdir}"

echo "dataset: ${dataset}"
echo "Assembler: ${assembler}"
echo "test: ${test}"
echo "Raw reads: ${raw_reads}"
echo "Contigs FASTA: ${contigs_fasta}"
echo "Aligned BAM: ${aligned_bam}"
echo "List of for aligned BAM: ${aligned_list}"
echo "Output directory: ${workdir}"

# Activate minimap2 first
conda activate align_minimap2

## Generate the reads list
grep '^@' "${raw_reads}" | cut -d ' ' -f1 | tr -d '@' > "${aligned_list}"

# grabbing reads
seqtk subseq "${raw_reads}" "${aligned_list}" | \
    minimap2 -ax map-ont \
    -t 24 "${reference_fasta}" - | \
    samtools view -F 4 -b | \
    samtools sort - > "${aligned_bam}"

        # making a bam index file
        samtools index "${aligned_bam}"
        # making the list of mapped reads
        samtools view -F 2308 "${aligned_bam}" | cut -f1 | sort > "${aligned_list}"


### Now to semibin
conda activate 
conda activate SemiBin


## Step 1: "SemiBin2. Generating Sequence Features"
echo ">>> Performing Semibin2..."
echo "    Generating Sequence Features...."
SemiBin2 \
    generate_sequence_features_single \
    --input-fasta ${contigs_fasta} \
    --input-bam ${aligned_bam} \
    --min-len 1000 \
    --output ${workdir} \
    --verbose


## Step 2: "SemiBin2... Training self"
echo ">>> Performing Semibin2..."
echo "    Training self..."
SemiBin2 \
    train_self \
    --data ${workdir}/data.csv \
    --data-split ${data_split} \
    --output ${workdir} \
    --engine "gpu" \
    -t 24 \
    --verbose


    'generate_sequence_features_single', '--input-fasta', 'data/metaflye/lr-ms/test5/medaka_consensus_simple_run/consensus.fasta', '--input-bam', 'data/metaflye/lr-ms/test5/map/metaflye_lr-ms_test5_mapped_sorted.bam', '--min-len', '1000', '--output', 'data/metaflye/lr-ms/test5/semibin2/bin', '--verbose'

## Step 3: "SemiBin2... Bin long"
echo ">>> Performing Semibin2..."
echo "    Bin long"
SemiBin2 \
    bin_long \
    -i ${contigs_fasta} \
    --model ${workdir}/model.pt \
    --data ${workdir}/data.csv \
    --output ${workdir} \
    --engine gpu \
    -t 24 \
    --verbose


echo "Finished. Final Semibin2: ${workdir}"

