#!/usr/bin/env bash
#SBATCH --partition=t1small
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=24
#SBATCH --mem=64G
#SBATCH --mail-user=wwinnett@alaska.edu
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --job-name=semibin2
#SBATCH --output=logs/slurm_semibin2_%j.log
#SBATCH --error=logs/slurm_semibin2_%j.log.err

# Set unlimited locked memory for processes (good for large jobs)
ulimit -l unlimited
ulimit -n 65536 # Increase open file descriptor limit if needed

set -euo pipefail

module load slurm
module load GCC/11.3.0
module load SAMtools/1.17
module load IPython/8.5.0
module load BCFtools/1.17
module load HTSlib/1.17

# --- Conda Initialization ---
CONDA_BASE=$(conda info --base)
if [ -f "${CONDA_BASE}/etc/profile.d/conda.sh" ]; then
    . "${CONDA_BASE}/etc/profile.d/conda.sh"
    echo "Conda initialized from ${CONDA_BASE}/etc/profile.d/conda.sh"
else
    echo "ERROR: conda.sh not found at ${CONDA_BASE}/etc/profile.d/conda.sh."
    echo "Please ensure Conda is installed and 'conda init bash' has been test."
    exit 1
fi




# Activate your Medaka conda environment
conda activate SemiBin


if [ $# -ne 4 ]; then
  echo "Usage: $0 <dataset> <assembler> <test> <contigs_fasta>"
  exit 1
fi

dataset=$1
assembler=$2
test=$3
contigs_fasta=$4
aligned_bam="data/${assembler}/${dataset}/${test}/map/${assembler}_${dataset}_${test}_mapped_sorted.bam"

workdir="data/${assembler}/${dataset}/${test}/semibin2/bin"
mkdir -p "${workdir}"



echo "dataset: ${dataset}"
echo "Assembler: ${assembler}"
echo "test: ${test}"
echo "Contigs FASTA: ${contigs_fasta}"
echo "Aligned BAM: ${aligned_bam}"
echo "Output directory: ${workdir}"






## Step 1: "SemiBin2. Generating Sequence Features"
echo ">>> Performing Semibin2..."
echo "    Generating Sequence Features...."
SemiBin2 \
    generate_sequence_features_single \
    --input-fasta ${contigs_fasta} \
    --input-bam ${aligned_bam} \
    --min-len 1000 \
    --output ${workdir} \
    --verbose


## Step 2: "SemiBin2... Training self"
echo ">>> Performing Semibin2..."
echo "    Training self..."
SemiBin2 \
    train_self \
    --data ${workdir}/data.csv \
    --data_split ${workdir}/data_split.csv \
    --output ${workdir} \
    --engine gpu \
    -t 24 \
    --verbose

## Step 3: "SemiBin2... Bin long"
echo ">>> Performing Semibin2..."
echo "    Bin long"
SemiBin2 \
    bin_long \
    -i ${contigs_fasta} \
    --model ${workdir}/model.pt \
    --data ${workdir}/data.csv \
    --output ${workdir} \
    --engine gpu \
    -t 24 \
    --verbose


echo "Finished. Final Semibin2: ${workdir}"

